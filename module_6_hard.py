# Дополнительное практическое задание по модулю: "Наследование классов."
# Реализовать классы Figure(родительский), Circle, Triangle и Cube,
# объекты которых будут обладать методами изменения размеров, цвета и т.д.
# Многие атрибуты и методы должны быть инкапсулированны и для них должны быть написаны
# интерфейсы взаимодействия (методы) - геттеры и сеттеры.
# Подробное ТЗ:

# Атрибуты класса Figure: sides_count = 0
# Каждый объект класса Figure должен обладать следующими атрибутами:
# 1. Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
# 2. Атрибуты(публичные): filled(закрашенный, bool)
# И методами:
# 1. Метод get_color, возвращает список RGB цветов.
# 2. Метод __is_valid_color - служебный, принимает параметры r, g, b,
# который проверяет корректность переданных значений перед установкой нового цвета.
# Корректным цвет: все значения r, g и b - целые числа в диапазоне от 0 до 255 (включительно).
# 3. Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
# предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
# 4. Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон,
# возвращает True если все стороны целые положительные числа и кол-во новых сторон совпадает с текущим,
# False - во всех остальных случаях.
# 5. Метод get_sides должен возвращать значение я атрибута __sides.
# 6. Метод __len__ должен возвращать периметр фигуры.
# 7. Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count,
# то не изменять, в противном случае - менять.
#
# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
# 1. Все атрибуты и методы класса Figure
# 2. Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
# 3. Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).

# Атрибуты класса Triangle: sides_count = 3
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
# 1. Все атрибуты и методы класса Figure
# 2. Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
#
# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
# 1. Все атрибуты и методы класса Figure.
# 2. Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
# 3. Метод get_volume, возвращает объём куба.

# ВАЖНО!
# При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно sides_count,
# то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
# Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
# Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
# Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]

# Примечания (рекомендации):
# Рекомендуется сделать дополнительные (свои проверки) работы методов объектов каждого класса.
# Делайте каждый класс и метод последовательно и проверяйте работу каждой части отдельно.
# Для проверки принадлежности к типу рекомендуется использовать функцию isinstance.
# Помните, служебные инкапсулированные методы можно и нужно использовать только внутри текущего класса.
# Вам не запрещается вводить дополнительные атрибуты и методы, творите, но не переборщите!

import math

class Figure:
    sides_count = 0
    def __init__ (self, color, *sides):
        # Атрибуты инкапсулированные
        self.__sides = list(sides)    # список сторон (целые числа)
        # self.sides_count = len(self.__sides)
        self.__color = color    # список цветов в формате RGB
        # Атрибуты публичный
        self.filled = True      # закрашенный

    def get_color(self):
        return(self.__color)

    def __is_valid_color(self, r, g, b):
        if int(r) >= 0 and int(r) <= 255 and int(g) >= 0 and int(g) <= 255 and int(b) >= 0 and int(b) <= 255:
            return(True)

    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b):
            self.__color = (r, g, b)

    def __is_valid_sides(self, *sds):
        _cur_sides = []
        for s in sds:
            if isinstance(int(s), int) and s > 0:
                _cur_sides.append(s)
        if len(_cur_sides) == len(self.__sides):
            return(True)
        else:
            return(False)

    def get_sides(self):
        return(self.__sides)

    def __len__(self):
        p = 0
        for i in self.__sides:
            p += i
        return(p)

    def set_sides(self, *new_sides):
        if len(new_sides) == self.sides_count:
            self.__sides = list(new_sides)

    def dim_sides(self, sides_count, sides):
        __my_sides = []
        if len(sides) != sides_count:
            for i in range(1, self.sides_count + 1):
                __my_sides.append(1)
        else:
            __my_sides = sides
        return(__my_sides)

class Circle(Figure):
    sides_count = 1
    def __init__(self, color, *sides):
        super().__init__(color, *sides)
        # Если число сторон некорректное, то переопределить стороны в список [1]
        self._Figure__sides = self.dim_sides(self.sides_count, sides)

        self.__radius = self._Figure__sides[0] / 2 * math.pi

    def get_square(self):
        return(math.pi * self.__radius ** 2) # возвращает площадь круга

class Triangle(Figure):
    sides_count = 3
    def __init__(self, color, *sides):
        super().__init__(color, *sides)
        # Если число сторон некорректное, то переопределить стороны в список [1,1,1]
        self._Figure__sides = self.dim_sides(self.sides_count, sides)

    def get_square(self):
        # площадь треугольника по формуле Герона по длинам сторон треугольника
        # Формула имеет вид: S = √p(p − a)(p − b)(p − c), где:
        # p — полупериметр треугольника (p = ½(a + b + c))
        p = (self.get_sides()[0] + self.get_sides()[1] + self.get_sides()[2]) / 2 # полупериметр треугольника
        p = (self.get_sides()[0] + self.get_sides()[1] + self.get_sides()[2]) / 2
        p = p * (p - self.get_sides()[0]) * (p - self.get_sides()[1]) * (p - self.get_sides()[2])
        s = math.sqrt(p)
        return(s)

class Cube(Figure):
    sides_count = 12
    def __init__(self, color, *sides):
        __cube_sides = []
        super().__init__(color, *sides)
        for i in range(1, self.sides_count + 1):
            # У куба если в списке сторон sides один элемент
            if len(sides) == 1:  # сделать список из 12 одинаковых элементов
                __cube_sides.append(sides[0])
            # если в списке сторон sides для куба отдали больше одного элемента, например [9, 12], то заполняем 1-ами
            else:
                __cube_sides.append(1)

        self._Figure__sides = __cube_sides

    def get_volume(self):
        return(self.get_sides()[0] ** 3)


# Код для проверки:
circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)
# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())
# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())
# Проверка периметра (круга), это и есть длина:
print(len(circle1))
# Проверка объёма (куба):
print(cube1.get_volume())

# Выходные данные (консоль):
# [55, 66, 77]
# [222, 35, 130]
# [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
# [15]
# 15
# 216



# print("Отладка")
# print("")
# print("")
# tri = Triangle((255, 255, 255), 3, 3, 3)
# print(tri.get_square())
# cube1 = Cube((222, 35, 130), 6)
# print(cube1.get_sides())

# fig1 = Figure((255, 255, 255), 3, 10)
# print(fig1._Figure__is_valid_sides(1))
# print(fig1.get_sides())
# print('Периметр', len(fig1))
# fig1.set_sides(1,3,4)
# print(fig1.get_sides())
#
# circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
#
# print(circle1.get_sides())
# print(circle1._Circle__radius)
# print('Площадь круга', circle1.get_square())

# print("Круг")
# # Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
# ccc = Circle((200, 200, 100), 10, 15, 6) #, т.к. сторона у круга всего 1, то его стороны будут - [1]
# print('Круг число сторон', ccc.sides_count, 'Стороны круга __sides', ccc.get_sides(), 'радиус', ccc._Circle__radius, 'площадь', ccc.get_square())
#
# print("ВАЖНО! 2")
# # При создании объектов делайте проверку на количество переданных сторон,
# # если сторон не ровно sides_count, то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
# # Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
# ttt = Triangle((200, 200, 100), 10, 6, 6) #, т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
# print('Треугольник число сторон', ttt.sides_count,'Стороны треугольника __sides',ttt.get_sides(), 'площадь',ttt.get_square())
#
# print("ВАЖНО! 3")
# uuu = Cube((200, 200, 100), 9, 12)#, т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
# print('Стороны куба __sides', uuu.get_sides())
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]



